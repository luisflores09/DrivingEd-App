@page "/user/{userId:int}"
@inject HttpClient Http

<PageTitle>User Details</PageTitle>

@if (user == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 50vh;">
        <p><em>Loading user details...</em></p>
    </div>
}
else
{
    <div class="container mt-5">
        <div class="card shadow-sm border-0">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4 text-center">
                        <img src="@user.ProfilePictureUrl" alt="User Picture" class="rounded-circle"
                             style="width: 150px; height: 150px;" />
                    </div>
                    <div class="col-md-8">
                        <h3 class="card-title">@user.FirstName @user.LastName</h3>
                        <p><strong>Email:</strong> @user.Email</p>
                        <p><strong>Phone:</strong> @user.PhoneNumber</p>
                        <p><strong>Role:</strong> @GetRoleName(user.Role)</p>
                        @if (!string.IsNullOrEmpty(user.Bio))
                        {
                            <p><strong>Bio:</strong> @user.Bio</p>
                        }
                        @if (!string.IsNullOrEmpty(user.Address))
                        {
                            <p><strong>Address:</strong> @user.Address</p>
                        }
                        @if (user.DateOfBirth.HasValue)
                        {
                            <p><strong>Date of Birth:</strong> @user.DateOfBirth.Value.ToShortDateString()</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@inject IConfiguration Configuration

@code {
    [Parameter]
    public int userId { get; set; }

    private User? user;
    private string ApiBaseUrl => Configuration["ApiBaseUrl"]!; // Dynamically fetch the base URL

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var apiUrl = $"{ApiBaseUrl}/user/{userId}";
            user = await Http.GetFromJsonAsync<User>(apiUrl);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching user details: {ex.Message}");
        }
    }

    private string GetRoleName(int role)
    {
        return role switch
        {
            0 => "Admin",
            1 => "Instructor",
            2 => "Student",
            _ => "Unknown"
        };
    }

    private class User
    {
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public int Role { get; set; }
        public string ProfilePictureUrl { get; set; } = "https://cdn-icons-png.flaticon.com/512/149/149071.png";
        public string? Bio { get; set; }
        public string? Address { get; set; }
        public DateTime? DateOfBirth { get; set; }
    }
}