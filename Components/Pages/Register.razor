@page "/register"
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer

<PageTitle>User Registration</PageTitle>

<h1>User Registration</h1>

<EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="firstName" class="form-label">First Name</label>
        <InputText id="firstName" class="form-control" @bind-Value="user.FirstName" />
    </div>

    <div class="mb-3">
        <label for="lastName" class="form-label">Last Name</label>
        <InputText id="lastName" class="form-control" @bind-Value="user.LastName" />
    </div>

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" class="form-control" @bind-Value="user.UserName" />
    </div>

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="user.Email" />
    </div>

    <div class="mb-3">
        <label for="phone" class="form-label">Phone Number</label>
        <InputText id="phone" class="form-control" @bind-Value="user.PhoneNumber" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="user.Password" />
    </div>

    <div class="mb-3">
        <label for="role" class="form-label">Role</label>
        <select id="role" class="form-select" @bind="user.Role">
            <option value="">Select Role</option>
            <option value="0">Admin</option>
            <option value="1">Instructor</option>
            <option value="2">Student</option>
        </select>
    </div>

    @if (user.Role == 0 || user.Role == 1)
    {
        <div class="mb-3">
            <label for="invitationCode" class="form-label">Invitation Code</label>
            <InputText id="invitationCode" class="form-control" @bind-Value="user.InvitationCode" />
        </div>
    }

    <div class="mb-3">
        <label for="licenseNumber" class="form-label">License Number</label>
        <InputText id="licenseNumber" class="form-control" @bind-Value="user.LicenseNumber" />
    </div>

    <div class="mb-3">
        <label for="vehicleDetails" class="form-label">Vehicle Details</label>
        <InputText id="vehicleDetails" class="form-control" @bind-Value="user.VehicleDetails" />
    </div>

    <div class="mb-3">
        <label for="profilePictureUrl" class="form-label">Profile Picture URL</label>
        <InputText id="profilePictureUrl" class="form-control" @bind-Value="user.ProfilePictureUrl" />
    </div>

    <div class="mb-3">
        <label for="bio" class="form-label">Bio</label>
        <InputTextArea id="bio" class="form-control" @bind-Value="user.Bio" />
    </div>

    <div class="mb-3">
        <label for="address" class="form-label">Address</label>
        <InputText id="address" class="form-control" @bind-Value="user.Address" />
    </div>

    <div class="mb-3">
        <label for="dateOfBirth" class="form-label">Date of Birth</label>
        <InputDate id="dateOfBirth" class="form-control" @bind-Value="user.DateOfBirth" />
    </div>

    <div class="mb-3">
        <label for="emergencyContactName" class="form-label">Emergency Contact Name</label>
        <InputText id="emergencyContactName" class="form-control" @bind-Value="user.EmergencyContactName" />
    </div>

    <div class="mb-3">
        <label for="emergencyContactPhone" class="form-label">Emergency Contact Phone</label>
        <InputText id="emergencyContactPhone" class="form-control" @bind-Value="user.EmergencyContactPhone" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (isPaymentVisible)
{
    <div class="mt-4">
        <h3>Make Payment</h3>
        <button class="btn btn-success" @onclick="MakePayment">Pay Registration Fee</button>
    </div>
}

@code {
    private User user = new User();
    private bool isPaymentVisible = false;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    private IHttpClientFactory? HttpClientFactory { get; set; }

    private HttpClient Http => HttpClientFactory.CreateClient("BackendAPI");

    private async Task HandleValidSubmit()
    {
        if ((user.Role == 1 || user.Role == 2) && string.IsNullOrWhiteSpace(user.InvitationCode))
        {
            Console.WriteLine("Invitation code is required for Admin or Instructor roles.");
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5256/api/user", user);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("User registered successfully.");
                isPaymentVisible = true;
                NavigationManager.NavigateTo("/allusers");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to register user. Response: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void MakePayment()
    {
        Console.WriteLine("Payment processed!");
    }

    public class User
{
    [Required(ErrorMessage = "First Name is required.")]
    [StringLength(50, ErrorMessage = "First Name cannot exceed 50 characters.")]
    public string FirstName { get; set; } = string.Empty;

    [Required(ErrorMessage = "Last Name is required.")]
    [StringLength(50, ErrorMessage = "Last Name cannot exceed 50 characters.")]
    public string LastName { get; set; } = string.Empty;

    [Required(ErrorMessage = "Username is required.")]
    [StringLength(20, ErrorMessage = "Username cannot exceed 20 characters.")]
    public string UserName { get; set; } = string.Empty;

    [Required(ErrorMessage = "Email is required.")]
    [EmailAddress(ErrorMessage = "Invalid email format.")]
    public string Email { get; set; } = string.Empty;

    [Required(ErrorMessage = "Phone Number is required.")]
    [Phone(ErrorMessage = "Invalid phone number format.")]
    public string PhoneNumber { get; set; } = string.Empty;

    [Required(ErrorMessage = "Password is required.")]
    [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be between 6 and 100 characters.")]
    public string Password { get; set; } = string.Empty;

    [Required(ErrorMessage = "Role is required.")]
    public int Role { get; set; }

    public string? InvitationCode { get; set; }

    public string? LicenseNumber { get; set; }

    public string? VehicleDetails { get; set; }

    [Url(ErrorMessage = "Invalid URL format.")]
    public string? ProfilePictureUrl { get; set; }

    [StringLength(500, ErrorMessage = "Bio cannot exceed 500 characters.")]
    public string? Bio { get; set; }

    public string? Address { get; set; }

    [Required(ErrorMessage = "Date of Birth is required.")]
    [DataType(DataType.Date, ErrorMessage = "Invalid date format.")]
    public DateTime? DateOfBirth { get; set; }

    [Required(ErrorMessage = "Emergency Contact Name is required.")]
    [StringLength(50, ErrorMessage = "Emergency Contact Name cannot exceed 50 characters.")]
    public string? EmergencyContactName { get; set; }

    [Required(ErrorMessage = "Emergency Contact Phone is required.")]
    [Phone(ErrorMessage = "Invalid phone number format.")]
    public string? EmergencyContactPhone { get; set; }
}
}