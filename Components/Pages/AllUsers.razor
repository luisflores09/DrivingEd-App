@page "/allusers"
@rendermode InteractiveServer

<PageTitle>All Users</PageTitle>

<h1 class="text-center my-4">All Users</h1>

@if (users == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 50vh;">
        <p><em>Loading...</em></p>
    </div>
}
else if (!users.Any())
{
    <div class="d-flex justify-content-center align-items-center" style="height: 50vh;">
        <p><em>No users found.</em></p>
    </div>
}
else
{
    <div class="container">
        <table class="table table-hover table-bordered table-striped">
            <thead class="thead-dark">
                <tr>
                    <th class="text-center">Picture</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Email</th>
                    <th>Role</th>
                    <th class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    <tr>
                        <td class="text-center">
                            <img src="@user.ProfilePictureUrl" alt="User Picture" class="rounded-circle"
                                style="width: 80px; height: 80px;" />
                        </td>
                        <td>@user.FirstName</td>
                        <td>@user.LastName</td>
                        <td>@user.Email</td>
                        <td>
                            @GetRoleName(user.Role.ToString())
                        </td>
                        <td class="text-center">
                            <a class="btn btn-primary btn-sm" href="/user/@user.Id">View Details</a>
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => OpenEditModal(user)">Update</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteUser(user.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (isEditModalVisible && selectedUser != null)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit User</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@selectedUser" OnValidSubmit="SubmitEditForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="firstName" class="form-label">First Name</label>
                            <InputText id="firstName" class="form-control" @bind-Value="selectedUser.FirstName" />
                        </div>

                        <div class="mb-3">
                            <label for="lastName" class="form-label">Last Name</label>
                            <InputText id="lastName" class="form-control" @bind-Value="selectedUser.LastName" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" type="email" class="form-control" @bind-Value="selectedUser.Email" />
                        </div>

                        <div class="mb-3">
                            <label for="role" class="form-label">Role</label>
                            <select id="role" class="form-select" @bind="selectedUser.Role">
                                <option value=0>Admin</option>
                                <option value=1>Instructor</option>
                                <option value=2>Student</option>
                            </select>
                        </div>

                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@inject IConfiguration Configuration

@code {
    private string ApiBaseUrl => Configuration["ApiBaseUrl"] ?? string.Empty;
    [Inject]
    private IJSRuntime? JSRuntime { get; set; }

    private List<User>? users;
    private User? selectedUser;
    private bool isEditModalVisible = false;
    private string GetRoleName(string role)
    {
        return role switch
        {
            "0" => "Admin",
            "1" => "Instructor",
            "2" => "Student",
            _ => "Unknown"
        };
    }

    [Inject]
    private IHttpClientFactory? HttpClientFactory { get; set; }

    private HttpClient Http => HttpClientFactory?.CreateClient("BackendAPI") ?? throw new
    InvalidOperationException("HttpClientFactory is not initialized.");

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            var apiUrl = $"{ApiBaseUrl}";
            users = await Http.GetFromJsonAsync<List<User>>(apiUrl);
            Console.WriteLine($"Fetched {users?.Count} users from API.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching users: {ex.Message}");
            users = new List<User>();
        }
    }

    private void OpenEditModal(User user)
    {
        selectedUser = new User
        {
            Id = user.Id,
            FirstName = user.FirstName,
            LastName = user.LastName,
            Email = user.Email,
            Role = user.Role,
            ProfilePictureUrl = user.ProfilePictureUrl
        };
        isEditModalVisible = true;
    }

    private void CloseEditModal()
    {
        isEditModalVisible = false;
        selectedUser = null;
    }

    private async Task SubmitEditForm()
    {
        if (selectedUser == null) return;

        try
        {
            var response = await Http.PutAsJsonAsync($"{ApiBaseUrl}/{selectedUser.Id}", selectedUser);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"User with ID {selectedUser.Id} updated successfully.");
                await LoadUsers(); // Reload the user list
                CloseEditModal();
            }
            else
            {
                Console.WriteLine($"Failed to update user with ID {selectedUser.Id}. Response: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating user with ID {selectedUser.Id}: {ex.Message}");
        }
    }

    private async Task DeleteUser(int userId)
    {
        if (JSRuntime == null)
        {
            Console.WriteLine("JSRuntime is not initialized.");
            return;
        }

        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete user with ID {userId}?");
        if (!confirm) return;

        try
        {
            var response = await Http.DeleteAsync($"{ApiBaseUrl}/{userId}");
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"User with ID {userId} deleted successfully.");
                users = users?.Where(u => u.Id != userId).ToList();
            }
            else
            {
                Console.WriteLine($"Failed to delete user with ID {userId}. Response: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting user with ID {userId}: {ex.Message}");
        }
    }

    private class User
    {
        public int Id { get; set; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public int Role { get; set; }
        public string ProfilePictureUrl { get; set; } = "https://cdn-icons-png.flaticon.com/512/149/149071.png";
    }
}